{
	"info": {
		"_postman_id": "378a6bef-f2fd-4a94-8e65-57cefdc12f3a",
		"name": "Trello Board",
		"description": "The collection aims to test the trello.com website's API within the scope of boards. The methods will be based on CRUD operations and E2E testing.\n\nThe collection includes functional and integration tests, as well as contract testing. Both happy paths and error handling will be tested. Collection is created based on test cases ([https://github.com/DorotaTrzpil/testingRepo/blob/328d21430438b2c9e38a700c6fcb7abf26739ead/TrelloTestCase.ods) ](https://github.com/DorotaTrzpil/testingRepo/blob/328d21430438b2c9e38a700c6fcb7abf26739ead/TrelloTestCase.ods) and the trello.com documentation ([https://developer.atlassian.com/cloud/trello/rest/api-group-boards/#api-group-boards](https://developer.atlassian.com/cloud/trello/rest/api-group-boards/#api-group-boards))",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24213863"
	},
	"item": [
		{
			"name": "Create board",
			"item": [
				{
					"name": "Create board#1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									" \r",
									"\r",
									"pm.test(\"The board has a name (not empty string)\", () => {\r",
									"        pm.expect(response.name).to.be.a(\"string\")\r",
									"        pm.expect(response.name).is.not.empty \r",
									"})\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"1boardId\", response.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{basicUrl}}?name={{$randomAdjective}}",
							"host": [
								"{{basicUrl}}"
							],
							"query": [
								{
									"key": "name",
									"value": "{{$randomAdjective}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Functional testing: verify board is created",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"Board is created with name and id\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.expect(response.id).is.not.empty\r",
									"    pm.expect(response.name).is.not.empty\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{basicUrl}}{{1boardId}}",
							"host": [
								"{{basicUrl}}{{1boardId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create board without name parameter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400: Bad Request\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									" \r",
									"\r",
									"pm.test(\"Messsage 'Invalid value for name' is displayed\", () => {\r",
									"        pm.expect(response.message).to.be.equal(\"invalid value for name\")\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{basicUrl}}",
							"host": [
								"{{basicUrl}}"
							],
							"query": [
								{
									"key": "name",
									"value": "123",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create board#2 with numerical name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									" \r",
									"\r",
									"pm.test(\"Name is saved as a string, not number\", () => {\r",
									"        pm.expect(response.name).to.be.a(\"string\")\r",
									"})\r",
									"\r",
									"pm.collectionVariables.set(\"2boardId\", response.id)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{basicUrl}}?name=123",
							"host": [
								"{{basicUrl}}"
							],
							"query": [
								{
									"key": "name",
									"value": "123"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create board#3 with optional parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"let response = pm.response.json();\r",
									" \r",
									"\r",
									"pm.test(\"Parameter 'description' is not empty\", () => {\r",
									"        pm.expect(response.desc).is.not.empty\r",
									"})\r",
									"\r",
									"pm.test (\"Parameter 'prefers_voting' has value 'members'\", () => {\r",
									"    pm.expect(response.prefs.voting).to.be.equal(\"members\")\r",
									"})\r",
									"\r",
									"pm.collectionVariables.set(\"3boardId\", response.id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{basicUrl}}?name={{$randomBsAdjective}}&desc={{$randomAdjective}}&prefs_voting=members",
							"host": [
								"{{basicUrl}}"
							],
							"query": [
								{
									"key": "name",
									"value": "{{$randomBsAdjective}}"
								},
								{
									"key": "desc",
									"value": "{{$randomAdjective}}"
								},
								{
									"key": "prefs_voting",
									"value": "members"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "**Scope of test**: create a board using the post method\n\n**Requirements according to Trello documentation** ([https://developer.atlassian.com/cloud/trello/rest/api-group-boards/#api-boards-post](https://developer.atlassian.com/cloud/trello/rest/api-group-boards/#api-boards-post)):\n\n- Name is a required query parameter\n- Name must be a string, 1 to 16384 characters long\n- Board can be created with optional parameters\n    \n\nTesting will cover test cases: id1, id2 ([https://github.com/DorotaTrzpil/testingRepo/blob/328d21430438b2c9e38a700c6fcb7abf26739ead/TrelloTestCase.ods](https://github.com/DorotaTrzpil/testingRepo/blob/328d21430438b2c9e38a700c6fcb7abf26739ead/TrelloTestCase.ods)) and includes contract, integration and functional testing."
		},
		{
			"name": "//Preparations for test",
			"item": [
				{
					"name": "// Prestep: Delete board#1",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{basicUrl}}{{1boardId}}",
							"host": [
								"{{basicUrl}}{{1boardId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "// Prestep: Delete board#2",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{basicUrl}}{{2boardId}}",
							"host": [
								"{{basicUrl}}{{2boardId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "In this section, unused boards are deleted to keep collection clean."
		},
		{
			"name": "Read board",
			"item": [
				{
					"name": "Get board#3 and verify schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"let response = pm.response.json();\r",
									"\r",
									"const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"name\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"desc\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"descData\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"closed\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"idOrganization\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"idEnterprise\": {\r",
									"      \"type\": \"null\"\r",
									"    },\r",
									"    \"pinned\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"url\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"shortUrl\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"prefs\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"permissionLevel\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"hideVotes\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"voting\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"comments\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"invitations\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"selfJoin\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"cardCovers\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"isTemplate\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"cardAging\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"calendarFeedEnabled\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"hiddenPluginBoardButtons\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {}\r",
									"        },\r",
									"        \"switcherViews\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": [\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            },\r",
									"            {\r",
									"              \"type\": \"object\",\r",
									"              \"properties\": {\r",
									"                \"viewType\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"enabled\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              },\r",
									"              \"required\": [\r",
									"                \"viewType\",\r",
									"                \"enabled\"\r",
									"              ]\r",
									"            }\r",
									"          ]\r",
									"        },\r",
									"        \"background\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"backgroundColor\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"backgroundImage\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"backgroundImageScaled\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"backgroundTile\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"backgroundBrightness\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"backgroundBottomColor\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"backgroundTopColor\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"canBePublic\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"canBeEnterprise\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"canBeOrg\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"canBePrivate\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"canInvite\": {\r",
									"          \"type\": \"boolean\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"permissionLevel\",\r",
									"        \"hideVotes\",\r",
									"        \"voting\",\r",
									"        \"comments\",\r",
									"        \"invitations\",\r",
									"        \"selfJoin\",\r",
									"        \"cardCovers\",\r",
									"        \"isTemplate\",\r",
									"        \"cardAging\",\r",
									"        \"calendarFeedEnabled\",\r",
									"        \"hiddenPluginBoardButtons\",\r",
									"        \"switcherViews\",\r",
									"        \"background\",\r",
									"        \"backgroundColor\",\r",
									"        \"backgroundImage\",\r",
									"        \"backgroundImageScaled\",\r",
									"        \"backgroundTile\",\r",
									"        \"backgroundBrightness\",\r",
									"        \"backgroundBottomColor\",\r",
									"        \"backgroundTopColor\",\r",
									"        \"canBePublic\",\r",
									"        \"canBeEnterprise\",\r",
									"        \"canBeOrg\",\r",
									"        \"canBePrivate\",\r",
									"        \"canInvite\"\r",
									"      ]\r",
									"    },\r",
									"    \"labelNames\": {\r",
									"      \"type\": \"object\",\r",
									"      \"properties\": {\r",
									"        \"green\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"yellow\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"orange\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"red\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"purple\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"blue\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"sky\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lime\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"pink\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"black\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"green_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"yellow_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"orange_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"red_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"purple_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"blue_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"sky_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lime_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"pink_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"black_dark\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"green_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"yellow_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"orange_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"red_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"purple_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"blue_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"sky_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"lime_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"pink_light\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"black_light\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      },\r",
									"      \"required\": [\r",
									"        \"green\",\r",
									"        \"yellow\",\r",
									"        \"orange\",\r",
									"        \"red\",\r",
									"        \"purple\",\r",
									"        \"blue\",\r",
									"        \"sky\",\r",
									"        \"lime\",\r",
									"        \"pink\",\r",
									"        \"black\",\r",
									"        \"green_dark\",\r",
									"        \"yellow_dark\",\r",
									"        \"orange_dark\",\r",
									"        \"red_dark\",\r",
									"        \"purple_dark\",\r",
									"        \"blue_dark\",\r",
									"        \"sky_dark\",\r",
									"        \"lime_dark\",\r",
									"        \"pink_dark\",\r",
									"        \"black_dark\",\r",
									"        \"green_light\",\r",
									"        \"yellow_light\",\r",
									"        \"orange_light\",\r",
									"        \"red_light\",\r",
									"        \"purple_light\",\r",
									"        \"blue_light\",\r",
									"        \"sky_light\",\r",
									"        \"lime_light\",\r",
									"        \"pink_light\",\r",
									"        \"black_light\"\r",
									"      ]\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"name\",\r",
									"    \"desc\",\r",
									"    \"descData\",\r",
									"    \"closed\",\r",
									"    \"idOrganization\",\r",
									"    \"idEnterprise\",\r",
									"    \"pinned\",\r",
									"    \"url\",\r",
									"    \"shortUrl\",\r",
									"    \"prefs\",\r",
									"    \"labelNames\"\r",
									"  ]\r",
									"}\r",
									"\r",
									"pm.test(\"Response has valid schema\", () =>{\r",
									"    pm.expect(response).to.have.jsonSchema(schema)\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{basicUrl}}{{3boardId}}",
							"host": [
								"{{basicUrl}}{{3boardId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get board#3 with optional params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 OK\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response contains optional param: BoardStar\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"boardStars\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{basicUrl}}{{3boardId}}?boardStars=mine",
							"host": [
								"{{basicUrl}}{{3boardId}}"
							],
							"query": [
								{
									"key": "boardStars",
									"value": "mine"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted board#2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404: Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{basicUrl}}{{1boardId}}",
							"host": [
								"{{basicUrl}}{{1boardId}}"
							],
							"query": [
								{
									"key": "boardStars",
									"value": "mine",
									"disabled": true
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "**Scope of test**: read a board using the get method\n\n**Requirements according to Trello documentation** ([https://developer.atlassian.com/cloud/trello/rest/api-group-boards/#api-boards-id-get](https://developer.atlassian.com/cloud/trello/rest/api-group-boards/#api-boards-id-get)):\n\n- Board id is a required path parameter\n- Deleted board can't be read\n- Board can be read with optional parameters\n    \n\nTesting will cover test case: id3 ([https://github.com/DorotaTrzpil/testingRepo/blob/328d21430438b2c9e38a700c6fcb7abf26739ead/TrelloTestCase.ods) ](https://github.com/DorotaTrzpil/testingRepo/blob/328d21430438b2c9e38a700c6fcb7abf26739ead/TrelloTestCase.ods) and includes contract and integration testing."
		},
		{
			"name": "Update board",
			"item": [
				{
					"name": "Update parameters of board#3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"Name parameter is updated\", () => {\r",
									"    pm.expect(response.name).to.be.equal(\"name test\")\r",
									"})\r",
									"\r",
									"pm.test(\"Description parameter is updated\", () => {\r",
									"    pm.expect(response.desc).to.be.equal(\"desc test\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{basicUrl}}{{3boardId}}?name=name test&desc=desc test",
							"host": [
								"{{basicUrl}}{{3boardId}}"
							],
							"query": [
								{
									"key": "name",
									"value": "name test"
								},
								{
									"key": "desc",
									"value": "desc test"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Functional testing: verify board is update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"var response = pm.response.json();\r",
									"\r",
									"pm.test(\"Name parameter is updated\", () => {\r",
									"    pm.expect(response.name).to.be.equal(\"name test\")\r",
									"})\r",
									"\r",
									"pm.test(\"Description parameter is updated\", () => {\r",
									"    pm.expect(response.desc).to.be.equal(\"desc test\")\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{basicUrl}}{{3boardId}}",
							"host": [
								"{{basicUrl}}{{3boardId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update deleted board#2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404: Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{basicUrl}}{{2boardId}}?name=test",
							"host": [
								"{{basicUrl}}{{2boardId}}"
							],
							"query": [
								{
									"key": "name",
									"value": "test"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "**Scope of test**: update a board using the put method\n\n**Requirements according to Trello documentation** ([https://developer.atlassian.com/cloud/trello/rest/api-group-boards/#api-boards-id-put)](https://developer.atlassian.com/cloud/trello/rest/api-group-boards/#api-boards-id-put)\n\n- Board id is a required path parameter\n    \n- Board can be uptated with optional parameters\n    \n- Deleted board can't be uptade\n    \n\nTesting will cover test cases: 4 ([https://github.com/DorotaTrzpil/testingRepo/blob/328d21430438b2c9e38a700c6fcb7abf26739ead/TrelloTestCase.ods](https://github.com/DorotaTrzpil/testingRepo/blob/328d21430438b2c9e38a700c6fcb7abf26739ead/TrelloTestCase.ods)) and includes contract, integration and functional testing."
		},
		{
			"name": "Delete board",
			"item": [
				{
					"name": "Delete board#3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has value 'null'\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData._value).to.eql(null);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{basicUrl}}{{3boardId}}",
							"host": [
								"{{basicUrl}}{{3boardId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Functional testing: verify board is deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404 Not Found\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"    pm.response.to.have.status(\"Not Found\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{basicUrl}}{{3boardId}}",
							"host": [
								"{{basicUrl}}{{3boardId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "**Scope of test**: update a board using the put method\n\n**Requirements according to Trello documentation** ([https://developer.atlassian.com/cloud/trello/rest/api-group-boards/#api-boards-id-delete](https://developer.atlassian.com/cloud/trello/rest/api-group-boards/#api-boards-id-delete)):\n\n- Board id is a required path parameter\n    \n\nTesting will cover test cases: 5 ([https://github.com/DorotaTrzpil/testingRepo/blob/328d21430438b2c9e38a700c6fcb7abf26739ead/TrelloTestCase.ods](https://github.com/DorotaTrzpil/testingRepo/blob/328d21430438b2c9e38a700c6fcb7abf26739ead/TrelloTestCase.ods)) and includes contract, integration and functional testing."
		}
	],
	"auth": {
		"type": "oauth1",
		"oauth1": [
			{
				"key": "consumerKey",
				"value": "{{key}}",
				"type": "string"
			},
			{
				"key": "consumerSecret",
				"value": "{{secret}}",
				"type": "string"
			},
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			},
			{
				"key": "signatureMethod",
				"value": "HMAC-SHA1",
				"type": "string"
			},
			{
				"key": "version",
				"value": "1.0",
				"type": "string"
			},
			{
				"key": "addParamsToHeader",
				"value": false,
				"type": "boolean"
			},
			{
				"key": "addEmptyParamsToSign",
				"value": false,
				"type": "boolean"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "basicUrl",
			"value": "https://api.trello.com/1/boards/"
		},
		{
			"key": "key",
			"value": "7fde9b9074fcf3328fa33c88f5211896"
		},
		{
			"key": "secret",
			"value": "9891ff7d81ecff1e3b8307750231fd8fd0ca827e5064683b4f404aa85d8a496a"
		},
		{
			"key": "token",
			"value": "ATTA7919ab144c07c294afad16dcdfa471eec0c3c9e0d7e240d0f6556e644392c1125C3B13A9"
		},
		{
			"key": "boardId",
			"value": ""
		},
		{
			"key": "longName",
			"value": ""
		},
		{
			"key": "1boardId",
			"value": ""
		},
		{
			"key": "2boardId",
			"value": ""
		},
		{
			"key": "3boardId",
			"value": ""
		}
	]
}